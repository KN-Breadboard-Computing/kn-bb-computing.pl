{
    "MOVAB": {
        "id": 0,
        "name": "MOVAB",
        "category": "Move Instructions",
        "opcode": "0b00000001",
        "mnemonic": "MOV",
        "arguments": [
            "A",
            "B"
        ],
        "microcodes": [
            "LOAD_PC_TO_MAR",
            "LOAD_MEM[MAR]_TO_IR_PC++",
            "LOAD_B_TO_A",
            "RST_MC"
        ],
        "description": "Move value from \\texttt{REG_B} to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_B} \\)"
    },
    "MOVBA": {
        "id": 1,
        "name": "MOVBA",
        "category": "Move Instructions",
        "opcode": "0b00000010",
        "mnemonic": "MOV",
        "arguments": [
            "B",
            "A"
        ],
        "microcodes": [
            "LOAD_PC_TO_MAR",
            "LOAD_MEM[MAR]_TO_IR_PC++",
            "LOAD_A_TO_B",
            "RST_MC"
        ],
        "description": "Move value from \\texttt{REG_A} to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_A} \\)"
    },
    "MOVAF": {
        "id": 2,
        "name": "MOVAF",
        "category": "Move Instructions",
        "opcode": "0b00000011",
        "mnemonic": "MOV",
        "arguments": [
            "A",
            "F"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_F} to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_F} \\)"
    },
    "MOVBF": {
        "id": 3,
        "name": "MOVBF",
        "category": "Move Instructions",
        "opcode": "0b00000100",
        "mnemonic": "MOV",
        "arguments": [
            "B",
            "F"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_F} to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_F} \\)"
    },
    "MOVATH": {
        "id": 4,
        "name": "MOVATH",
        "category": "Move Instructions",
        "opcode": "0b00000101",
        "mnemonic": "MOV",
        "arguments": [
            "A",
            "TMPH"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_TMPH} to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_TMPH} \\)"
    },
    "MOVBTH": {
        "id": 5,
        "name": "MOVBTH",
        "category": "Move Instructions",
        "opcode": "0b00000110",
        "mnemonic": "MOV",
        "arguments": [
            "B",
            "TMPH"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_TMPH} to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_TMPH} \\)"
    },
    "MOVATL": {
        "id": 6,
        "name": "MOVATL",
        "category": "Move Instructions",
        "opcode": "0b00000111",
        "mnemonic": "MOV",
        "arguments": [
            "A",
            "TMPL"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_TMPL} to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_TMPL} \\)"
    },
    "MOVBTL": {
        "id": 7,
        "name": "MOVBTL",
        "category": "Move Instructions",
        "opcode": "0b00001000",
        "mnemonic": "MOV",
        "arguments": [
            "B",
            "TMPL"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_TMPL} to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_TMPL} \\)"
    },
    "MOVTHA": {
        "id": 8,
        "name": "MOVTHA",
        "category": "Move Instructions",
        "opcode": "0b00001001",
        "mnemonic": "MOV",
        "arguments": [
            "TMPH",
            "A"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_A} to \\texttt{REG_TMPH}",
        "microcodes-description": "\\( \\texttt{REG_TMPH} \\leftarrow \\texttt{REG_A} \\)"
    },
    "MOVTHB": {
        "id": 9,
        "name": "MOVTHB",
        "category": "Move Instructions",
        "opcode": "0b00001010",
        "mnemonic": "MOV",
        "arguments": [
            "TMPH",
            "B"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_B} to \\texttt{REG_TMPH}",
        "microcodes-description": "\\( \\texttt{REG_TMPH} \\leftarrow \\texttt{REG_B} \\)"
    },
    "MOVTLA": {
        "id": 10,
        "name": "MOVTLA",
        "category": "Move Instructions",
        "opcode": "0b00001011",
        "mnemonic": "MOV",
        "arguments": [
            "TMPL",
            "A"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_A} to \\texttt{REG_TMPL}",
        "microcodes-description": "\\( \\texttt{REG_TMPL} \\leftarrow \\texttt{REG_A} \\)"
    },
    "MOVTLB": {
        "id": 11,
        "name": "MOVTLB",
        "category": "Move Instructions",
        "opcode": "0b00001100",
        "mnemonic": "MOV",
        "arguments": [
            "TMPL",
            "B"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_B} to \\texttt{REG_TMPL}",
        "microcodes-description": "\\( \\texttt{REG_TMPL} \\leftarrow \\texttt{REG_B} \\)"
    },
    "MOVAIMM": {
        "id": 12,
        "name": "MOVAIMM",
        "category": "Move Instructions",
        "opcode": "0b00001101",
        "mnemonic": "MOV",
        "arguments": [
            "A",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_A} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\)"
    },
    "MOVBIMM": {
        "id": 13,
        "name": "MOVBIMM",
        "category": "Move Instructions",
        "opcode": "0b00001110",
        "mnemonic": "MOV",
        "arguments": [
            "B",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_B} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\)"
    },
    "MOVTHIMM": {
        "id": 14,
        "name": "MOVTHIMM",
        "category": "Move Instructions",
        "opcode": "0b00001111",
        "mnemonic": "MOV",
        "arguments": [
            "TMPH",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to \\texttt{REG_TMPH}",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\)"
    },
    "MOVTLIMM": {
        "id": 15,
        "name": "MOVTLIMM",
        "category": "Move Instructions",
        "opcode": "0b00010000",
        "mnemonic": "MOV",
        "arguments": [
            "TMPL",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to \\texttt{REG_TMPL}",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\)"
    },
    "MOVAABS": {
        "id": 16,
        "name": "MOVAABS",
        "category": "Move Instructions",
        "opcode": "0b00010001",
        "mnemonic": "MOV",
        "arguments": [
            "A",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Move constant from memory at given address to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_A} \\leftarrow \\texttt{MEM[REG_MAR]} \\)"
    },
    "MOVAABSZP": {
        "id": 17,
        "name": "MOVAABSZP",
        "category": "Move Instructions",
        "opcode": "0b00010010",
        "mnemonic": "MOV",
        "arguments": [
            "A",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Move constant from zero page memory at given address to \\texttt{REG_A}",
        "microcodes-description": ""
    },
    "MOVBABS": {
        "id": 18,
        "name": "MOVBABS",
        "category": "Move Instructions",
        "opcode": "0b00010011",
        "mnemonic": "MOV",
        "arguments": [
            "B",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Move constant from memory at given address to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_B} \\leftarrow \\texttt{MEM[REG_MAR]} \\)"
    },
    "MOVBABSZP": {
        "id": 19,
        "name": "MOVBABSZP",
        "category": "Move Instructions",
        "opcode": "0b00010100",
        "mnemonic": "MOV",
        "arguments": [
            "B",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Move constant from zero page memory at given address to \\texttt{REG_B}",
        "microcodes-description": ""
    },
    "MOVABSA": {
        "id": 20,
        "name": "MOVABSA",
        "category": "Move Instructions",
        "opcode": "0b00010101",
        "mnemonic": "MOV",
        "arguments": [
            "MEM16",
            "A"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_A} to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow \\texttt{REG_A} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "MOVABSAZP": {
        "id": 21,
        "name": "MOVABSAZP",
        "category": "Move Instructions",
        "opcode": "0b00010110",
        "mnemonic": "MOV",
        "arguments": [
            "MEM8",
            "A"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_A} to zero page memory at given address",
        "microcodes-description": ""
    },
    "MOVABSB": {
        "id": 22,
        "name": "MOVABSB",
        "category": "Move Instructions",
        "opcode": "0b00010111",
        "mnemonic": "MOV",
        "arguments": [
            "MEM16",
            "B"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_B} to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow \\texttt{REG_B} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "MOVABSBZP": {
        "id": 23,
        "name": "MOVABSBZP",
        "category": "Move Instructions",
        "opcode": "0b00011000",
        "mnemonic": "MOV",
        "arguments": [
            "MEM8",
            "B"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_B} to zero page memory at given address",
        "microcodes-description": ""
    },
    "MOVABSIMM": {
        "id": 24,
        "name": "MOVABSIMM",
        "category": "Move Instructions",
        "opcode": "0b00011001",
        "mnemonic": "MOV",
        "arguments": [
            "MEM16",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow \\texttt{MEM[REG_MAR]} \\) <br> \\( \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "MOVABSIMMZP": {
        "id": 25,
        "name": "MOVABSIMMZP",
        "category": "Move Instructions",
        "opcode": "0b00011010",
        "mnemonic": "MOV",
        "arguments": [
            "MEM8",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to zero page memory at given address",
        "microcodes-description": ""
    },
    "MOVATTMPA": {
        "id": 26,
        "name": "MOVATTMPA",
        "category": "Move Instructions",
        "opcode": "0b00011011",
        "mnemonic": "MOV",
        "arguments": [
            "TMP",
            "A"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_A} to memory at address given by value of \\texttt{REG_TMP}",
        "microcodes-description": ""
    },
    "MOVATTMPB": {
        "id": 27,
        "name": "MOVATTMPB",
        "category": "Move Instructions",
        "opcode": "0b00011100",
        "mnemonic": "MOV",
        "arguments": [
            "TMP",
            "B"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_B} to memory at address given by value of \\texttt{REG_TMP}",
        "microcodes-description": ""
    },
    "MOVATAB": {
        "id": 28,
        "name": "MOVATAB",
        "category": "Move Instructions",
        "opcode": "0b00011101",
        "mnemonic": "MOV",
        "arguments": [
            "A",
            "B"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_B} to zero page memory at address given by value of \\texttt{REG_A}",
        "microcodes-description": ""
    },
    "MOVATBA": {
        "id": 29,
        "name": "MOVATBA",
        "category": "Move Instructions",
        "opcode": "0b00011110",
        "mnemonic": "MOV",
        "arguments": [
            "B",
            "A"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_A} to zero page memory at address given by value of \\texttt{REG_B}",
        "microcodes-description": ""
    },
    "MOVATTHA": {
        "id": 30,
        "name": "MOVATTHA",
        "category": "Move Instructions",
        "opcode": "0b00011111",
        "mnemonic": "MOV",
        "arguments": [
            "TMPH",
            "A"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_A} to zero page memory at address given by value of \\texttt{REG_TMPH}",
        "microcodes-description": ""
    },
    "MOVATTHB": {
        "id": 31,
        "name": "MOVATTHB",
        "category": "Move Instructions",
        "opcode": "0b00100000",
        "mnemonic": "MOV",
        "arguments": [
            "TMPH",
            "B"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_B} to zero page memory at address given by value of \\texttt{REG_TMPH}",
        "microcodes-description": ""
    },
    "MOVATTLA": {
        "id": 32,
        "name": "MOVATTLA",
        "category": "Move Instructions",
        "opcode": "0b00100001",
        "mnemonic": "MOV",
        "arguments": [
            "TMPL",
            "A"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_A} to zero page memory at address given by value of \\texttt{REG_TMPL}",
        "microcodes-description": ""
    },
    "MOVATTLB": {
        "id": 33,
        "name": "MOVATTLB",
        "category": "Move Instructions",
        "opcode": "0b00100010",
        "mnemonic": "MOV",
        "arguments": [
            "TMPL",
            "B"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_B} to zero page memory at address given by value of \\texttt{REG_TMPL}",
        "microcodes-description": ""
    },
    "MOVATTLTH": {
        "id": 34,
        "name": "MOVATTLTH",
        "category": "Move Instructions",
        "opcode": "0b00100011",
        "mnemonic": "MOV",
        "arguments": [
            "TMPL",
            "TMPH"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_TMPH} to zero page memory at address given by value of \\texttt{REG_TMPL}",
        "microcodes-description": ""
    },
    "MOVATTHTL": {
        "id": 35,
        "name": "MOVATTHTL",
        "category": "Move Instructions",
        "opcode": "0b00100100",
        "mnemonic": "MOV",
        "arguments": [
            "TMPH",
            "TMPL"
        ],
        "microcodes": [],
        "description": "Move value from \\texttt{REG_TMPL} to zero page memory at address given by value of \\texttt{REG_TMPH}",
        "microcodes-description": ""
    },
    "MOVATTMPIMM": {
        "id": 36,
        "name": "MOVATTMPIMM",
        "category": "Move Instructions",
        "opcode": "0b00100101",
        "mnemonic": "MOV",
        "arguments": [
            "TMP",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to memory at address given by value of \\texttt{REG_TMP}",
        "microcodes-description": ""
    },
    "MOVATTMPHIMM": {
        "id": 37,
        "name": "MOVATTMPHIMM",
        "category": "Move Instructions",
        "opcode": "0b00100110",
        "mnemonic": "MOV",
        "arguments": [
            "TMPH",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to zero page memory at address given by value of \\texttt{REG_TMPH}",
        "microcodes-description": ""
    },
    "MOVATTMPLIMM": {
        "id": 38,
        "name": "MOVATTMPLIMM",
        "category": "Move Instructions",
        "opcode": "0b00100111",
        "mnemonic": "MOV",
        "arguments": [
            "TMPL",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to zero page memory at address given by value of \\texttt{REG_TMPL}",
        "microcodes-description": ""
    },
    "MOVATAIMM": {
        "id": 39,
        "name": "MOVATAIMM",
        "category": "Move Instructions",
        "opcode": "0b00101000",
        "mnemonic": "MOV",
        "arguments": [
            "A",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to zero page memory at address given by value of \\texttt{REG_A}",
        "microcodes-description": ""
    },
    "MOVATBIMM": {
        "id": 40,
        "name": "MOVATBIMM",
        "category": "Move Instructions",
        "opcode": "0b00101001",
        "mnemonic": "MOV",
        "arguments": [
            "B",
            "CONST"
        ],
        "microcodes": [],
        "description": "Move given constant to zero page memory at address given by value of \\texttt{REG_B}",
        "microcodes-description": ""
    },
    "NEGAA": {
        "id": 41,
        "name": "NEGAA",
        "category": "ALU instructions",
        "opcode": "0b00101010",
        "mnemonic": "NEG",
        "arguments": [
            "A",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_A} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow -\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "NEGAB": {
        "id": 42,
        "name": "NEGAB",
        "category": "ALU instructions",
        "opcode": "0b00101011",
        "mnemonic": "NEG",
        "arguments": [
            "A",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_A} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow -\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "NEGAMEM": {
        "id": 43,
        "name": "NEGAMEM",
        "category": "ALU instructions",
        "opcode": "0b00101100",
        "mnemonic": "NEG",
        "arguments": [
            "A",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_A} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow -\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "NEGAMEMZP": {
        "id": 44,
        "name": "NEGAMEMZP",
        "category": "ALU instructions",
        "opcode": "0b00101101",
        "mnemonic": "NEG",
        "arguments": [
            "A",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_A} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "NEGASTC": {
        "id": 45,
        "name": "NEGASTC",
        "category": "ALU instructions",
        "opcode": "0b00101110",
        "mnemonic": "NEG",
        "arguments": [
            "A",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_A} and save it on stack",
        "microcodes-description": ""
    },
    "NEGBA": {
        "id": 46,
        "name": "NEGBA",
        "category": "ALU instructions",
        "opcode": "0b00101111",
        "mnemonic": "NEG",
        "arguments": [
            "B",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_B} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow -\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "NEGBB": {
        "id": 47,
        "name": "NEGBB",
        "category": "ALU instructions",
        "opcode": "0b00110000",
        "mnemonic": "NEG",
        "arguments": [
            "B",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_B} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow -\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "NEGBMEM": {
        "id": 48,
        "name": "NEGBMEM",
        "category": "ALU instructions",
        "opcode": "0b00110001",
        "mnemonic": "NEG",
        "arguments": [
            "B",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_B} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow -\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "NEGBMEMZP": {
        "id": 49,
        "name": "NEGBMEMZP",
        "category": "ALU instructions",
        "opcode": "0b00110010",
        "mnemonic": "NEG",
        "arguments": [
            "B",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_B} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "NEGBSTC": {
        "id": 50,
        "name": "NEGBSTC",
        "category": "ALU instructions",
        "opcode": "0b00110011",
        "mnemonic": "NEG",
        "arguments": [
            "B",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate negation of \\texttt{REG_B} and save it on stack",
        "microcodes-description": ""
    },
    "ADDA": {
        "id": 51,
        "name": "ADDA",
        "category": "ALU instructions",
        "opcode": "0b00110100",
        "mnemonic": "ADD",
        "arguments": [
            "A"
        ],
        "microcodes": [],
        "description": "Calculate sum of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_A} + \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "ADDB": {
        "id": 52,
        "name": "ADDB",
        "category": "ALU instructions",
        "opcode": "0b00110101",
        "mnemonic": "ADD",
        "arguments": [
            "B"
        ],
        "microcodes": [],
        "description": "Calculate sum of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_A} + \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "ADDMEM": {
        "id": 53,
        "name": "ADDMEM",
        "category": "ALU instructions",
        "opcode": "0b00110110",
        "mnemonic": "ADD",
        "arguments": [
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate sum of \\texttt{REG_A} and \\texttt{REG_B} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow \\texttt{REG_A} + \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "ADDMEMZP": {
        "id": 54,
        "name": "ADDMEMZP",
        "category": "ALU instructions",
        "opcode": "0b00110111",
        "mnemonic": "ADD",
        "arguments": [
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate sum of \\texttt{REG_A} and \\texttt{REG_B} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "ADDSTC": {
        "id": 55,
        "name": "ADDSTC",
        "category": "ALU instructions",
        "opcode": "0b00111000",
        "mnemonic": "ADD",
        "arguments": [
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate sum of \\texttt{REG_A} and \\texttt{REG_B} and save it on stack",
        "microcodes-description": ""
    },
    "SUBABA": {
        "id": 56,
        "name": "SUBABA",
        "category": "ALU instructions",
        "opcode": "0b00111001",
        "mnemonic": "SUB",
        "arguments": [
            "A",
            "B",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_A} - \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SUBABB": {
        "id": 57,
        "name": "SUBABB",
        "category": "ALU instructions",
        "opcode": "0b00111010",
        "mnemonic": "SUB",
        "arguments": [
            "A",
            "B",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_A} - \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SUBABMEM": {
        "id": 58,
        "name": "SUBABMEM",
        "category": "ALU instructions",
        "opcode": "0b00111011",
        "mnemonic": "SUB",
        "arguments": [
            "A",
            "B",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_A} and \\texttt{REG_B} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow \\texttt{REG_A} - \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "SUBABMEMZP": {
        "id": 59,
        "name": "SUBABMEMZP",
        "category": "ALU instructions",
        "opcode": "0b00111100",
        "mnemonic": "SUB",
        "arguments": [
            "A",
            "B",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_A} and \\texttt{REG_B} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "SUBABSTC": {
        "id": 60,
        "name": "SUBABSTC",
        "category": "ALU instructions",
        "opcode": "0b00111101",
        "mnemonic": "SUB",
        "arguments": [
            "A",
            "B",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_A} and \\texttt{REG_B} and save it on stack",
        "microcodes-description": ""
    },
    "SUBBAA": {
        "id": 61,
        "name": "SUBBAA",
        "category": "ALU instructions",
        "opcode": "0b00111110",
        "mnemonic": "SUB",
        "arguments": [
            "B",
            "A",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_B} and \\texttt{REG_A} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_B} - \\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SUBBAB": {
        "id": 62,
        "name": "SUBBAB",
        "category": "ALU instructions",
        "opcode": "0b00111111",
        "mnemonic": "SUB",
        "arguments": [
            "B",
            "A",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_B} and \\texttt{REG_A} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_B} - \\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SUBBAMEM": {
        "id": 63,
        "name": "SUBBAMEM",
        "category": "ALU instructions",
        "opcode": "0b01000000",
        "mnemonic": "SUB",
        "arguments": [
            "B",
            "A",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_B} and \\texttt{REG_A} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow \\texttt{REG_B} - \\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "SUBBAMEMZP": {
        "id": 64,
        "name": "SUBBAMEMZP",
        "category": "ALU instructions",
        "opcode": "0b01000001",
        "mnemonic": "SUB",
        "arguments": [
            "B",
            "A",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_B} and \\texttt{REG_A} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "SUBBASTC": {
        "id": 65,
        "name": "SUBBASTC",
        "category": "ALU instructions",
        "opcode": "0b01000010",
        "mnemonic": "SUB",
        "arguments": [
            "B",
            "A",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate difference of \\texttt{REG_B} and \\texttt{REG_A} and save it on stack",
        "microcodes-description": ""
    },
    "MULA2A": {
        "id": 66,
        "name": "MULA2A",
        "category": "ALU instructions",
        "opcode": "0b01000011",
        "mnemonic": "MUL",
        "arguments": [
            "A",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_A} and \\texttt{2} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow *\\texttt{REG_A} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "MULA2B": {
        "id": 67,
        "name": "MULA2B",
        "category": "ALU instructions",
        "opcode": "0b01000100",
        "mnemonic": "MUL",
        "arguments": [
            "A",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_A} and \\texttt{2} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow *\\texttt{REG_A} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "MULA2MEM": {
        "id": 68,
        "name": "MULA2MEM",
        "category": "ALU instructions",
        "opcode": "0b01000101",
        "mnemonic": "MUL",
        "arguments": [
            "A",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_A} and \\texttt{2} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow *\\texttt{REG_A} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "MULA2MEMZP": {
        "id": 69,
        "name": "MULA2MEMZP",
        "category": "ALU instructions",
        "opcode": "0b01000110",
        "mnemonic": "MUL",
        "arguments": [
            "A",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_A} and \\texttt{2} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "MULA2STC": {
        "id": 70,
        "name": "MULA2STC",
        "category": "ALU instructions",
        "opcode": "0b01000111",
        "mnemonic": "MUL",
        "arguments": [
            "A",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_A} and \\texttt{2} and save it on stack",
        "microcodes-description": ""
    },
    "MULB2A": {
        "id": 71,
        "name": "MULB2A",
        "category": "ALU instructions",
        "opcode": "0b01001000",
        "mnemonic": "MUL",
        "arguments": [
            "B",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_B} and \\texttt{2} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow *\\texttt{REG_B} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "MULB2B": {
        "id": 72,
        "name": "MULB2B",
        "category": "ALU instructions",
        "opcode": "0b01001001",
        "mnemonic": "MUL",
        "arguments": [
            "B",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_B} and \\texttt{2} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow *\\texttt{REG_B} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "MULB2MEM": {
        "id": 73,
        "name": "MULB2MEM",
        "category": "ALU instructions",
        "opcode": "0b01001010",
        "mnemonic": "MUL",
        "arguments": [
            "B",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_B} and \\texttt{2} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow *\\texttt{REG_B} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "MULB2MEMZP": {
        "id": 74,
        "name": "MULB2MEMZP",
        "category": "ALU instructions",
        "opcode": "0b01001011",
        "mnemonic": "MUL",
        "arguments": [
            "B",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_B} and \\texttt{2} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "MULB2STC": {
        "id": 75,
        "name": "MULB2STC",
        "category": "ALU instructions",
        "opcode": "0b01001100",
        "mnemonic": "MUL",
        "arguments": [
            "B",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate multiplication of \\texttt{REG_B} and \\texttt{2} and save it on stack",
        "microcodes-description": ""
    },
    "DIVA2A": {
        "id": 76,
        "name": "DIVA2A",
        "category": "ALU instructions",
        "opcode": "0b01001101",
        "mnemonic": "DIV",
        "arguments": [
            "A",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_A} and \\texttt{2} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow /\\texttt{REG_A} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "DIVA2B": {
        "id": 77,
        "name": "DIVA2B",
        "category": "ALU instructions",
        "opcode": "0b01001110",
        "mnemonic": "DIV",
        "arguments": [
            "A",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_A} and \\texttt{2} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow /\\texttt{REG_A} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "DIVA2MEM": {
        "id": 78,
        "name": "DIVA2MEM",
        "category": "ALU instructions",
        "opcode": "0b01001111",
        "mnemonic": "DIV",
        "arguments": [
            "A",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_A} and \\texttt{2} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow /\\texttt{REG_A} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "DIVA2MEMZP": {
        "id": 79,
        "name": "DIVA2MEMZP",
        "category": "ALU instructions",
        "opcode": "0b01010000",
        "mnemonic": "DIV",
        "arguments": [
            "A",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_A} and \\texttt{2} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "DIVA2STC": {
        "id": 80,
        "name": "DIVA2STC",
        "category": "ALU instructions",
        "opcode": "0b01010001",
        "mnemonic": "DIV",
        "arguments": [
            "A",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_A} and \\texttt{2} and save it on stack",
        "microcodes-description": ""
    },
    "DIVB2A": {
        "id": 81,
        "name": "DIVB2A",
        "category": "ALU instructions",
        "opcode": "0b01010010",
        "mnemonic": "DIV",
        "arguments": [
            "B",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_B} and \\texttt{2} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow /\\texttt{REG_B} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "DIVB2B": {
        "id": 82,
        "name": "DIVB2B",
        "category": "ALU instructions",
        "opcode": "0b01010011",
        "mnemonic": "DIV",
        "arguments": [
            "B",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_B} and \\texttt{2} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow /\\texttt{REG_B} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "DIVB2MEM": {
        "id": 83,
        "name": "DIVB2MEM",
        "category": "ALU instructions",
        "opcode": "0b01010100",
        "mnemonic": "DIV",
        "arguments": [
            "B",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_B} and \\texttt{2} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow /\\texttt{REG_B} and \\texttt{2} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "DIVB2MEMZP": {
        "id": 84,
        "name": "DIVB2MEMZP",
        "category": "ALU instructions",
        "opcode": "0b01010101",
        "mnemonic": "DIV",
        "arguments": [
            "B",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_B} and \\texttt{2} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "DIVB2STC": {
        "id": 85,
        "name": "DIVB2STC",
        "category": "ALU instructions",
        "opcode": "0b01010110",
        "mnemonic": "DIV",
        "arguments": [
            "B",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate quotient of \\texttt{REG_B} and \\texttt{2} and save it on stack",
        "microcodes-description": ""
    },
    "INVAA": {
        "id": 86,
        "name": "INVAA",
        "category": "ALU instructions",
        "opcode": "0b01010111",
        "mnemonic": "INV",
        "arguments": [
            "A",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_A} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow ~\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "INVAB": {
        "id": 87,
        "name": "INVAB",
        "category": "ALU instructions",
        "opcode": "0b01011000",
        "mnemonic": "INV",
        "arguments": [
            "A",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_A} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow ~\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "INVAMEM": {
        "id": 88,
        "name": "INVAMEM",
        "category": "ALU instructions",
        "opcode": "0b01011001",
        "mnemonic": "INV",
        "arguments": [
            "A",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_A} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow ~\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "INVAMEMZP": {
        "id": 89,
        "name": "INVAMEMZP",
        "category": "ALU instructions",
        "opcode": "0b01011010",
        "mnemonic": "INV",
        "arguments": [
            "A",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_A} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "INVASTC": {
        "id": 90,
        "name": "INVASTC",
        "category": "ALU instructions",
        "opcode": "0b01011011",
        "mnemonic": "INV",
        "arguments": [
            "A",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_A} and save it on stack",
        "microcodes-description": ""
    },
    "INVBA": {
        "id": 91,
        "name": "INVBA",
        "category": "ALU instructions",
        "opcode": "0b01011100",
        "mnemonic": "INV",
        "arguments": [
            "B",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_B} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow ~\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "INVBB": {
        "id": 92,
        "name": "INVBB",
        "category": "ALU instructions",
        "opcode": "0b01011101",
        "mnemonic": "INV",
        "arguments": [
            "B",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_B} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow ~\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "INVBMEM": {
        "id": 93,
        "name": "INVBMEM",
        "category": "ALU instructions",
        "opcode": "0b01011110",
        "mnemonic": "INV",
        "arguments": [
            "B",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_B} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow ~\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "INVBMEMZP": {
        "id": 94,
        "name": "INVBMEMZP",
        "category": "ALU instructions",
        "opcode": "0b01011111",
        "mnemonic": "INV",
        "arguments": [
            "B",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_B} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "INVBSTC": {
        "id": 95,
        "name": "INVBSTC",
        "category": "ALU instructions",
        "opcode": "0b01100000",
        "mnemonic": "INV",
        "arguments": [
            "B",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate bit inversion of \\texttt{REG_B} and save it on stack",
        "microcodes-description": ""
    },
    "ORA": {
        "id": 96,
        "name": "ORA",
        "category": "ALU instructions",
        "opcode": "0b01100001",
        "mnemonic": "OR",
        "arguments": [
            "A"
        ],
        "microcodes": [],
        "description": "Calculate alternative of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_A} OR \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "ORB": {
        "id": 97,
        "name": "ORB",
        "category": "ALU instructions",
        "opcode": "0b01100010",
        "mnemonic": "OR",
        "arguments": [
            "B"
        ],
        "microcodes": [],
        "description": "Calculate alternative of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_A} OR \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "ORMEM": {
        "id": 98,
        "name": "ORMEM",
        "category": "ALU instructions",
        "opcode": "0b01100011",
        "mnemonic": "OR",
        "arguments": [
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate alternative of \\texttt{REG_A} and \\texttt{REG_B} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow \\texttt{REG_A} OR \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "ORMEMZP": {
        "id": 99,
        "name": "ORMEMZP",
        "category": "ALU instructions",
        "opcode": "0b01100100",
        "mnemonic": "OR",
        "arguments": [
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate alternative of \\texttt{REG_A} and \\texttt{REG_B} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "ORSTC": {
        "id": 100,
        "name": "ORSTC",
        "category": "ALU instructions",
        "opcode": "0b01100101",
        "mnemonic": "OR",
        "arguments": [
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate alternative of \\texttt{REG_A} and \\texttt{REG_B} and save it on stack",
        "microcodes-description": ""
    },
    "ANDA": {
        "id": 101,
        "name": "ANDA",
        "category": "ALU instructions",
        "opcode": "0b01100110",
        "mnemonic": "AND",
        "arguments": [
            "A"
        ],
        "microcodes": [],
        "description": "Calculate conjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_A} AND \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "ANDB": {
        "id": 102,
        "name": "ANDB",
        "category": "ALU instructions",
        "opcode": "0b01100111",
        "mnemonic": "AND",
        "arguments": [
            "B"
        ],
        "microcodes": [],
        "description": "Calculate conjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_A} AND \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "ANDMEM": {
        "id": 103,
        "name": "ANDMEM",
        "category": "ALU instructions",
        "opcode": "0b01101000",
        "mnemonic": "AND",
        "arguments": [
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate conjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow \\texttt{REG_A} AND \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "ANDMEMZP": {
        "id": 104,
        "name": "ANDMEMZP",
        "category": "ALU instructions",
        "opcode": "0b01101001",
        "mnemonic": "AND",
        "arguments": [
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate conjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "ANDSTC": {
        "id": 105,
        "name": "ANDSTC",
        "category": "ALU instructions",
        "opcode": "0b01101010",
        "mnemonic": "AND",
        "arguments": [
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate conjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it on stack",
        "microcodes-description": ""
    },
    "XORA": {
        "id": 106,
        "name": "XORA",
        "category": "ALU instructions",
        "opcode": "0b01101011",
        "mnemonic": "XOR",
        "arguments": [
            "A"
        ],
        "microcodes": [],
        "description": "Calculate exclusive disjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_A} XOR \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "XORB": {
        "id": 107,
        "name": "XORB",
        "category": "ALU instructions",
        "opcode": "0b01101100",
        "mnemonic": "XOR",
        "arguments": [
            "B"
        ],
        "microcodes": [],
        "description": "Calculate exclusive disjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_A} XOR \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "XORMEM": {
        "id": 108,
        "name": "XORMEM",
        "category": "ALU instructions",
        "opcode": "0b01101101",
        "mnemonic": "XOR",
        "arguments": [
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate exclusive disjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow \\texttt{REG_A} XOR \\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "XORMEMZP": {
        "id": 109,
        "name": "XORMEMZP",
        "category": "ALU instructions",
        "opcode": "0b01101110",
        "mnemonic": "XOR",
        "arguments": [
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate exclusive disjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "XORSTC": {
        "id": 110,
        "name": "XORSTC",
        "category": "ALU instructions",
        "opcode": "0b01101111",
        "mnemonic": "XOR",
        "arguments": [
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate exclusive disjunction of \\texttt{REG_A} and \\texttt{REG_B} and save it on stack",
        "microcodes-description": ""
    },
    "SHRAA": {
        "id": 111,
        "name": "SHRAA",
        "category": "ALU instructions",
        "opcode": "0b01110000",
        "mnemonic": "SHR",
        "arguments": [
            "A",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_A} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow >>\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SHRAB": {
        "id": 112,
        "name": "SHRAB",
        "category": "ALU instructions",
        "opcode": "0b01110001",
        "mnemonic": "SHR",
        "arguments": [
            "A",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_A} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow >>\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SHRAMEM": {
        "id": 113,
        "name": "SHRAMEM",
        "category": "ALU instructions",
        "opcode": "0b01110010",
        "mnemonic": "SHR",
        "arguments": [
            "A",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_A} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow >>\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "SHRAMEMZP": {
        "id": 114,
        "name": "SHRAMEMZP",
        "category": "ALU instructions",
        "opcode": "0b01110011",
        "mnemonic": "SHR",
        "arguments": [
            "A",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_A} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "SHRASTC": {
        "id": 115,
        "name": "SHRASTC",
        "category": "ALU instructions",
        "opcode": "0b01110100",
        "mnemonic": "SHR",
        "arguments": [
            "A",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_A} and save it on stack",
        "microcodes-description": ""
    },
    "SHRBA": {
        "id": 116,
        "name": "SHRBA",
        "category": "ALU instructions",
        "opcode": "0b01110101",
        "mnemonic": "SHR",
        "arguments": [
            "B",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_B} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow >>\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SHRBB": {
        "id": 117,
        "name": "SHRBB",
        "category": "ALU instructions",
        "opcode": "0b01110110",
        "mnemonic": "SHR",
        "arguments": [
            "B",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_B} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow >>\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SHRBMEM": {
        "id": 118,
        "name": "SHRBMEM",
        "category": "ALU instructions",
        "opcode": "0b01110111",
        "mnemonic": "SHR",
        "arguments": [
            "B",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_B} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow >>\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "SHRBMEMZP": {
        "id": 119,
        "name": "SHRBMEMZP",
        "category": "ALU instructions",
        "opcode": "0b01111000",
        "mnemonic": "SHR",
        "arguments": [
            "B",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_B} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "SHRBSTC": {
        "id": 120,
        "name": "SHRBSTC",
        "category": "ALU instructions",
        "opcode": "0b01111001",
        "mnemonic": "SHR",
        "arguments": [
            "B",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate right shift of \\texttt{REG_B} and save it on stack",
        "microcodes-description": ""
    },
    "SHLAA": {
        "id": 121,
        "name": "SHLAA",
        "category": "ALU instructions",
        "opcode": "0b01111010",
        "mnemonic": "SHL",
        "arguments": [
            "A",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_A} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow <<\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SHLAB": {
        "id": 122,
        "name": "SHLAB",
        "category": "ALU instructions",
        "opcode": "0b01111011",
        "mnemonic": "SHL",
        "arguments": [
            "A",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_A} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow <<\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SHLAMEM": {
        "id": 123,
        "name": "SHLAMEM",
        "category": "ALU instructions",
        "opcode": "0b01111100",
        "mnemonic": "SHL",
        "arguments": [
            "A",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_A} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow <<\\texttt{REG_A} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "SHLAMEMZP": {
        "id": 124,
        "name": "SHLAMEMZP",
        "category": "ALU instructions",
        "opcode": "0b01111101",
        "mnemonic": "SHL",
        "arguments": [
            "A",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_A} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "SHLASTC": {
        "id": 125,
        "name": "SHLASTC",
        "category": "ALU instructions",
        "opcode": "0b01111110",
        "mnemonic": "SHL",
        "arguments": [
            "A",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_A} and save it on stack",
        "microcodes-description": ""
    },
    "SHLBA": {
        "id": 126,
        "name": "SHLBA",
        "category": "ALU instructions",
        "opcode": "0b01111111",
        "mnemonic": "SHL",
        "arguments": [
            "B",
            "A"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_B} and save it to \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow <<\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SHLBB": {
        "id": 127,
        "name": "SHLBB",
        "category": "ALU instructions",
        "opcode": "0b10000000",
        "mnemonic": "SHL",
        "arguments": [
            "B",
            "B"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_B} and save it to \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow <<\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\)"
    },
    "SHLBMEM": {
        "id": 128,
        "name": "SHLBMEM",
        "category": "ALU instructions",
        "opcode": "0b10000001",
        "mnemonic": "SHL",
        "arguments": [
            "B",
            "MEM8"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_B} and save it to memory at given address",
        "microcodes-description": "\\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPH} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{PC} \\) <br> \\( \\texttt{REG_TMPL} \\leftarrow \\texttt{MEM[REG_MAR]} \\quad \\& \\quad \\texttt{PC} \\leftarrow \\texttt{PC+1} \\) <br> \\( \\texttt{REG_MAR} \\leftarrow \\texttt{REG_TMP} \\) <br> \\( \\texttt{REG_MBR} \\leftarrow <<\\texttt{REG_B} \\quad \\& \\quad \\texttt{save flags to } \\texttt{REG_F} \\) <br> \\( \\texttt{MEM[REG_MAR]} \\leftarrow \\texttt{REG_MBR} \\)"
    },
    "SHLBMEMZP": {
        "id": 129,
        "name": "SHLBMEMZP",
        "category": "ALU instructions",
        "opcode": "0b10000010",
        "mnemonic": "SHL",
        "arguments": [
            "B",
            "MEM16"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_B} and save it to zero page memory at given address",
        "microcodes-description": ""
    },
    "SHLBSTC": {
        "id": 130,
        "name": "SHLBSTC",
        "category": "ALU instructions",
        "opcode": "0b10000011",
        "mnemonic": "SHL",
        "arguments": [
            "B",
            "STC"
        ],
        "microcodes": [],
        "description": "Calculate left shift of \\texttt{REG_B} and save it on stack",
        "microcodes-description": ""
    },
    "INCA": {
        "id": 142,
        "name": "INCA",
        "category": "ALU instructions",
        "opcode": "0b10001111",
        "mnemonic": "INC",
        "arguments": [
            "A"
        ],
        "microcodes": [],
        "description": "Increment value of \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_A + 1}  \\)"
    },
    "INCB": {
        "id": 143,
        "name": "INCB",
        "category": "ALU instructions",
        "opcode": "0b10010000",
        "mnemonic": "INC",
        "arguments": [
            "B"
        ],
        "microcodes": [],
        "description": "Increment value of \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_B + 1}  \\)"
    },
    "INCTMP": {
        "id": 144,
        "name": "INCTMP",
        "category": "ALU instructions",
        "opcode": "0b10010001",
        "mnemonic": "INC",
        "arguments": [
            "TMP"
        ],
        "microcodes": [],
        "description": "Increment value of \\texttt{REG_TMP}",
        "microcodes-description": "\\( \\texttt{REG_TMP} \\leftarrow \\texttt{REG_TMP + 1}  \\)"
    },
    "INCTH": {
        "id": 145,
        "name": "INCTH",
        "category": "ALU instructions",
        "opcode": "0b10010010",
        "mnemonic": "INC",
        "arguments": [
            "TH"
        ],
        "microcodes": [],
        "description": "Increment value of \\texttt{REG_TH}",
        "microcodes-description": "\\( \\texttt{REG_TH} \\leftarrow \\texttt{REG_TH + 1}  \\)"
    },
    "INCTL": {
        "id": 146,
        "name": "INCTL",
        "category": "ALU instructions",
        "opcode": "0b10010011",
        "mnemonic": "INC",
        "arguments": [
            "TL"
        ],
        "microcodes": [],
        "description": "Increment value of \\texttt{REG_TL}",
        "microcodes-description": "\\( \\texttt{REG_TL} \\leftarrow \\texttt{REG_TL + 1}  \\)"
    },
    "DECA": {
        "id": 147,
        "name": "DECA",
        "category": "ALU instructions",
        "opcode": "0b10010100",
        "mnemonic": "DEC",
        "arguments": [
            "A"
        ],
        "microcodes": [],
        "description": "Decrement value of \\texttt{REG_A}",
        "microcodes-description": "\\( \\texttt{REG_A} \\leftarrow \\texttt{REG_A - 1}  \\)"
    },
    "DECB": {
        "id": 148,
        "name": "DECB",
        "category": "ALU instructions",
        "opcode": "0b10010101",
        "mnemonic": "DEC",
        "arguments": [
            "B"
        ],
        "microcodes": [],
        "description": "Decrement value of \\texttt{REG_B}",
        "microcodes-description": "\\( \\texttt{REG_B} \\leftarrow \\texttt{REG_B - 1}  \\)"
    },
    "DECTMP": {
        "id": 149,
        "name": "DECTMP",
        "category": "ALU instructions",
        "opcode": "0b10010110",
        "mnemonic": "DEC",
        "arguments": [
            "TMP"
        ],
        "microcodes": [],
        "description": "Decrement value of \\texttt{REG_TMP}",
        "microcodes-description": "\\( \\texttt{REG_TMP} \\leftarrow \\texttt{REG_TMP - 1}  \\)"
    },
    "DECTH": {
        "id": 150,
        "name": "DECTH",
        "category": "ALU instructions",
        "opcode": "0b10010111",
        "mnemonic": "DEC",
        "arguments": [
            "TH"
        ],
        "microcodes": [],
        "description": "Decrement value of \\texttt{REG_TH}",
        "microcodes-description": "\\( \\texttt{REG_TH} \\leftarrow \\texttt{REG_TH - 1}  \\)"
    },
    "DECTL": {
        "id": 151,
        "name": "DECTL",
        "category": "ALU instructions",
        "opcode": "0b10011000",
        "mnemonic": "DEC",
        "arguments": [
            "TL"
        ],
        "microcodes": [],
        "description": "Decrement value of \\texttt{REG_TL}",
        "microcodes-description": "\\( \\texttt{REG_TL} \\leftarrow \\texttt{REG_TL - 1}  \\)"
    }
}